/**
 * –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Firebase Storage
 * - avatars/{userId}/avatar.png (–ø—Ä–∏–≤–∞—Ç–Ω–æ: –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)
 * - audio/practices/{practiceId}/demo.mp3 (–ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —á—Ç–µ–Ω–∏–µ)
 * - firmware/{hardwareVersion}/{semver}/firmware.bin (–ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —á—Ç–µ–Ω–∏–µ)
 */

import { initializeApp } from 'firebase-admin/app';
import { getStorage } from 'firebase-admin/storage';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
const app = initializeApp();
const storage = getStorage(app);

async function uploadBuffer(
  bucketName: string,
  filePath: string,
  buffer: Buffer,
  contentType: string,
  metadata: Record<string, string> = {}
) {
  const bucket = storage.bucket(bucketName);
  const file = bucket.file(filePath);
  await file.save(buffer, {
    contentType,
    metadata: { metadata }
  });
  return `gs://${bucketName}/${filePath}`;
}

function createPng1x1(): Buffer {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG (1x1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å)
  return Buffer.from(
    '89504E470D0A1A0A0000000D49484452000000010000000108060000001F15C4890000000A49444154789C6360000002000154A20B450000000049454E44AE426082',
    'hex'
  );
}

function createDummyMp3(): Buffer {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞: ID3 —Ç–µ–≥ + –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
  const id3 = Buffer.from('4944330300000000000F', 'hex'); // ID3v2 header
  const payload = Buffer.from('Test MP3 payload');
  return Buffer.concat([id3, payload]);
}

function createDummyFirmware(): Buffer {
  // –ë–∏–Ω–∞—Ä–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
  return Buffer.from('FIRMWARE_DUMMY_1.0.0');
}

async function main() {
  try {
    const bucketName = process.env.FIREBASE_STORAGE_BUCKET || process.env.GCLOUD_PROJECT || 'emu-bucket';

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Storage...');

    // 1) Avatar (private to owner)
    const userId = 'user_test_1';
    const avatarPath = `avatars/${userId}/avatar.png`;
    const avatarUrl = await uploadBuffer(
      bucketName,
      avatarPath,
      createPng1x1(),
      'image/png'
    );
    console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: ${avatarUrl}`);

    // 2) Practice audio (public read by rules)
    const practiceId = 'practice_test_1';
    const audioPath = `audio/practices/${practiceId}/demo.mp3`;
    const audioUrl = await uploadBuffer(
      bucketName,
      audioPath,
      createDummyMp3(),
      'audio/mpeg'
    );
    console.log(`‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${audioUrl}`);

    // 3) Firmware (public read by rules)
    const firmwarePath = `firmware/200/2.0.0/firmware.bin`;
    const fwUrl = await uploadBuffer(
      bucketName,
      firmwarePath,
      createDummyFirmware(),
      'application/octet-stream'
    );
    console.log(`‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${fwUrl}`);

    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ –≤ Storage:', err);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}


