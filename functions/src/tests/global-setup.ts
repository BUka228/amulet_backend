/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Firebase Emulator Suite
 */

import { spawn } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs';
import * as path from 'path';
import * as net from 'net';
import { setEmulatorsAlreadyRunning } from './emulator-state';

const exec = promisify(require('child_process').exec);

let emulatorProcess: any;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
const isPortAvailable = (port: number): Promise<boolean> => {
  return new Promise((resolve) => {
    const server = net.createServer();
    server.listen(port, () => {
      server.once('close', () => resolve(true));
      server.close();
    });
    server.on('error', () => resolve(false));
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä—ã
const checkEmulatorsRunning = async (): Promise<boolean> => {
  const ports = [8080, 9099, 9199, 5001]; // Firestore, Auth, Storage, Functions
  const results = await Promise.all(ports.map(port => isPortAvailable(port)));
  return results.some(available => !available); // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
const checkEmulatorsHealth = async (): Promise<boolean> => {
  try {
    const response = await fetch('http://localhost:8080');
    return response.ok;
  } catch {
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
const stopOldEmulators = async (): Promise<void> => {
  try {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...');
    
    if (process.platform === 'win32') {
      await exec('taskkill /f /im firebase.exe');
      await exec('taskkill /f /im firebase.cmd');
    } else {
      await exec('pkill -f firebase');
    }
    
    // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:', error);
  }
};

export default async function globalSetup() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase Emulator Suite...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await exec('firebase --version');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —É–∂–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    const emulatorsRunning = await checkEmulatorsRunning();
    
    if (emulatorsRunning) {
      console.log('‚ö†Ô∏è  –≠–º—É–ª—è—Ç–æ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      
      const emulatorsHealthy = await checkEmulatorsHealth();
      
      if (emulatorsHealthy) {
        console.log('‚úÖ –≠–º—É–ª—è—Ç–æ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        setEmulatorsAlreadyRunning(true);
        return;
      } else {
        console.log('‚ö†Ô∏è  –≠–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...');
        await stopOldEmulators();
      }
    }
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã
    const firebaseCmd = process.platform === 'win32' ? 'firebase.cmd' : 'firebase';
    emulatorProcess = spawn(firebaseCmd, [
      'emulators:start',
      '--only',
      'firestore,auth,storage,functions',
      '--project',
      'amulet-test'
    ], {
      stdio: 'pipe',
      cwd: path.join(__dirname, '../../..')
    });

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    await new Promise((resolve, reject) => {
      let output = '';
      let errorOutput = '';
      
      emulatorProcess.stdout.on('data', (data: Buffer) => {
        output += data.toString();
        console.log(data.toString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
        if (output.includes('All emulators ready!') || 
            output.includes('Emulator UI ready at')) {
          resolve(true);
        }
      });

      emulatorProcess.stderr.on('data', (data: Buffer) => {
        errorOutput += data.toString();
        console.error(data.toString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ä—Ç–æ–≤
        if (errorOutput.includes('EADDRINUSE') || 
            errorOutput.includes('port is already in use')) {
          reject(new Error('–ü–æ—Ä—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã.'));
        }
      });

      emulatorProcess.on('error', (error: Error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:', error);
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç—è—Ç—Å—è
      setTimeout(() => {
        if (!output.includes('All emulators ready!')) {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã.'));
        }
      }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    console.log('‚úÖ Firebase Emulator Suite –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ teardown
    if (emulatorProcess.pid) {
      fs.writeFileSync(
        path.join(__dirname, '../../.emulator.pid'), 
        emulatorProcess.pid.toString()
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:', error);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã: firebase emulators:stop');
    console.log('2. –£–±–µ–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Firebase: pkill -f firebase');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: lsof -i :8080,9099,9199,5001');
    console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
    
    throw error;
  }
}

// –§–ª–∞–≥ –±–æ–ª—å—à–µ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
