import { spawn } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';
import fetch from 'node-fetch'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º node-fetch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
import { setEmulatorsAlreadyRunning } from './emulator-state';


// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const PROJECT_ID = 'amulet-test';
const FIRESTORE_PORT = 8080;
const AUTH_PORT = 9099;
const STORAGE_PORT = 9199;
const FUNCTIONS_PORT = 5001;
const HOSTING_PORT = 5000;
const EMULATOR_PORTS = [FIRESTORE_PORT, AUTH_PORT, STORAGE_PORT, FUNCTIONS_PORT, HOSTING_PORT];

let emulatorProcess: any;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–ª—É—à–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç
const isPortInUse = (port: number): Promise<boolean> => {
	return new Promise((resolve) => {
		const server = require('net').createServer();
		server.once('error', (err: any) => {
			if (err.code === 'EADDRINUSE') {
				resolve(true); // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
			}
		});
		server.once('listening', () => {
			server.close();
			resolve(false); // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
		});
		server.listen(port);
	});
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "–∑–¥–æ—Ä–æ–≤—å—è" —ç–º—É–ª—è—Ç–æ—Ä–∞ Firestore
const checkFirestoreHealth = async (): Promise<boolean> => {
	try {
		const response = await fetch(`http://127.0.0.1:${FIRESTORE_PORT}`);
		// –≠–º—É–ª—è—Ç–æ—Ä Firestore –æ—Ç–¥–∞–µ—Ç 404 –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
		return response.status === 404;
	} catch (error) {
		return false;
	}
};

export default async function globalSetup() {
	console.log('üöÄ [Global Setup] –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase Emulator Suite...');

	const portsAreInUse = (await Promise.all(EMULATOR_PORTS.map(isPortInUse))).some(Boolean);

	if (portsAreInUse) {
		console.log('    - –ü–æ—Ä—Ç—ã —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –∑–∞–Ω—è—Ç—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
		const isHealthy = await checkFirestoreHealth();
		if (isHealthy) {
			console.log('‚úÖ [Global Setup] –≠–º—É–ª—è—Ç–æ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –∏ –æ—Ç–≤–µ—á–∞—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.');
			setEmulatorsAlreadyRunning(true);
			return;
		} else {
			console.error('‚ùå [Global Setup] –≠–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é (`firebase emulators:stop`) –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã.');
			throw new Error('Hanging emulators detected');
		}
	}

	console.log('    - –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å...');

	const firebaseCmd = process.platform === 'win32' ? 'firebase.cmd' : 'firebase';
	const projectRoot = path.join(__dirname, '..', '..', '..', '..', '..'); // –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ firebase.json)

	emulatorProcess = spawn(
		firebaseCmd,
		[
			'emulators:start',
			'--only',
			'auth,functions,firestore,storage,hosting',
			'--project',
			PROJECT_ID,
		],
		{
			cwd: projectRoot, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
			shell: true,      // –í–ê–ñ–ù–û –¥–ª—è Windows, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å .cmd
			detached: true,   // –ü–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
		}
	);

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º PID, —á—Ç–æ–±—ã —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ teardown
	if (emulatorProcess.pid) {
		fs.writeFileSync(path.join(__dirname, '.emulator.pid'), emulatorProcess.pid.toString());
	}

	// –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è
	await new Promise<void>((resolve, reject) => {
		const timeout = setTimeout(() => {
			reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (60 —Å–µ–∫—É–Ω–¥).'));
		}, 60000);

		emulatorProcess.stdout.on('data', (data: Buffer) => {
			const output = data.toString();
			console.log(output); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			if (output.includes('All emulators ready!')) {
				console.log('‚úÖ [Global Setup] –≠–º—É–ª—è—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã!');
				clearTimeout(timeout);
				resolve();
			}
		});

		emulatorProcess.stderr.on('data', (data: Buffer) => {
			console.error(data.toString());
		});

		emulatorProcess.on('error', (err: Error) => {
			clearTimeout(timeout);
			reject(err);
		});

		emulatorProcess.on('exit', (code: number) => {
			if (code !== 0) {
				clearTimeout(timeout);
				reject(new Error(`–ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
			}
		});
	});

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
	await new Promise(resolve => setTimeout(resolve, 3000));
}